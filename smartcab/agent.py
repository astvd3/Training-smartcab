import random
import math
from environment import Agent, Environment
import numpy as np
#import math
from planner import RoutePlanner
from simulator import Simulator
global alpha
alpha=1
class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 
    #learning=1;
    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions
        self.prev_state=0;
        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        self.trial_count=0
        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing==True:
            self.epsilon=0
            self.alpha=0
        else:
            #self.epsilon=self.epsilon-0.01
            #self.epsilon=math.pow(self.alpha,self.trial_count)
            
            #self.epsilon=math.pow(alpha,self.trial_count)
            self.trial_count+=1
            self.epsilon=np.sin(1.0/math.pow(self.trial_count,0.5))
            #self.epsilon=math.pow(self.alpha,(self.trial_count+5.0/5.0))
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline
        print(inputs)
        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent
        # When learning, check if the state is in the Q-table
        #   If it is not, create a dictionary in the Q-table for the current 'state'
        #   For each action, set the Q-value for the state-action pair to 0
        light=inputs['light']
        oncoming=inputs['oncoming']
        left=inputs['left']
        right=inputs['right']
        if left==None:
            left=0;
        else:
            left=1;
        if right==None:
            right=0;
        else:
            right=1;
        if oncoming==None:
            oncoming=0;
        else:
            oncoming=1;
        print(inputs)
        state = (light,waypoint,right,left,oncoming)
        self.createQ(state)
        self.prev_state=state;
        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        actions = [None, 'forward', 'left', 'right']
        #print(self.Q[state])
        q = [self.Q[state][a] for a in actions]
        #print(max(q))
        maxQ=max(q)
        #maxQ=max(self.Q[state], key=lambda x: x[1])
         #= max(self.Q[state],key=itemgetter(1))

        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
	#if learning==True:
        if state in self.Q:
            print("")
        else:
            self.Q[state]={'left':1.0,'right':1.0,'forward':1.0,None:1.0}
			#self.Q[state]['None'] = 0.0
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        #if learning==True:
        #    epsilon=epsilon-0.0
        #else:
        if self.learning==False:
            action = random.choice(self.valid_actions)
            print("Learning Disabled")
        else:
            if np.random.random() < self.epsilon:
                action = random.choice(self.valid_actions)
                print("Learning High Epsilon")
                print(action)
            else:
                #print(self.get_maxQ(state))
        #print(self.Q)
                max=self.get_maxQ(state);
                list=self.Q[state]
                #print(list)
                #print(list.keys()[list.values().index(max)]) 
                action = list.keys()[list.values().index(max)]
                print("Learning MaxQ")
                print(action)
 
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """
        global alpha
        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        #if learning==True:
        #print(self.Q)
        #print(self.Q[state])
        #print(reward)
        if self.learning==True:
            self.Q[state][action] = (1 - alpha)*self.Q[state][action] + alpha*(reward)
        #alpha=0.5
        self.prev_state=state;
        return 0


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        #print(state)
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn
        #self.epsilon=self.epsilon-0.05
        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent,learning=True)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent,enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env,update_delay=0.001,log_metrics=True,optimized=True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=10,tolerance=0.09)


if __name__ == '__main__':
    run()
    print(agent.Q)
